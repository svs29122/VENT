This is a TODO list for VENT work:
-
** High Priority **
	1) remove duplicate library production in emitter
	2) update call expression to allow multiple arguments
__________________________________________________________________________________________________
-
-
I) Lexer ToDo
	1) Build out robust handling for Illegal tokens

II) AST ToDo
### DONE ###	1) Implement variable size arrays for syntax tree units requiring it
### DONE ###	2) Wrap AST token declarations in DEBUG macros
### DONE ###	3) Thinking it might be nice to have a walkTree method instead of forcing the parser to do it multiple times
	### DONE ###	i) the transpiler will also have to walk the tree to emit VHDL 
	### DONE ###	ii) wondering if I could use a set of callbacks e.g. handleEntityDecl() that the caller sets to keep it generic 
			 ###			- this way a caller wanting to print could set handleEntityDecl equal to some print function, while the parser may set handleEntityDecl equal to some function that frees mallocs
			 ###			- this is something like the well-known strategy pattern 
### DONE ###	4) Refactor Walk Tree into readable units
### DONE ### 5) Refactor Operation Block into a small set of operations that depend on the client checking the node type
			
			
III) Parser ToDo
### DONE ###	1) Unit tests for basic parser functions
	### DONE ###		i) flesh this out fully for ents before adding much more functionality
	### DROPPED ### ii) thinking I want a set of tests for the public API and for the private
					###	e.g. parser_test.c for public
					###		 parser_test_internals.c for private
### DONE ###   2) Implement error strategy e.g. the wrong token follows an ent decl
### DONE ###   3) Begin implementing Architecture parsing functionality	
### DONE ###   4) Need to complete architecture body signal assigment parsing and binary expression parsing
	5) allow declarations and statements to be mixed in source i.e. some declarations can come after statements
		- there should be rules here e.g. any declaration must come before it is used in a statement
	6) still need to add support for multiple signals in proc sensitivity list
	

IV) Transpiler ToDo
	### DONE ###	1) Need to add validation to transpile_test.c
		### DONE ###	i) we currently only produce a file with 0 asserting or checking
	

V) Refactor ToDo
### DONE ###  	1) Go through Valgrind output and fix memory leaks
### DONE ###  	2) Go add static keyword to any variables that should be static
### DONE ###	3) Wondering about maybe passing the ventsrc char* to ParseProgram and having it do lexer/parser initialization instead of requiring a caller to do all of that work upfront
		

VI) Overall ToDo
	1) Need to implement basic functionality including proc, comp, map, if, when, loop
		i) need to do work to handle comma separated lists of identifiers
		ii) need to handle labels and decide if they are treated differently than identifiers by the lexer
	2) Need to go and add NULL checks to all of my heap allocations especially in the parser duh...
	3) Need to add a step before transpilation that analyzes the tree for logical errors e.g. assigning a var using a <= operator etc.
		i) this will require tracking the state of the design unit and elements within it		
		ii) the effort here will be large but definitely necessary
		iii) this could be added to the parser as we are building the tree or added as a separate module 
		iv) Thinking a symbol table will be necessary to evalulate errors in instantiation or assignment


VII) Proc ToDo
	1) sequential statements to implement:
		i) wait
		### DONE ###	ii) signal and variable assignment
		### DONE ###	iii) if, case for, while, loop
		### DONE ###	iv) null
		### DONE ###	v) assert, report
		vi) next, exit
		vii) procedure call, return


VIII) Components
	### DONE ###	0) Labels
	### DONE ###	1) Declaration
	### DONE ###	2) Instantiation/Mapping
	### DONE ###	2.5) Force all instantiations to be done as associative mappings
	### DONE ###	3) Generic mapping
	### DONE ### 	4) emit instance mappings with each port on new line
	5) Direct entity instantation
	6) Need to fix instantations where multi port/generics are defined


IX) Language features
	1) Components
	2) Generics
	3) Concurrent Statements
		i) generate
		ii) with-select
		iii) functions/procedures
		iv) blocks
	...
	10) Packages


X) Other Reminders
	1) Hitting an issue with stlvs because accessing them requires using parenthesis, which Identifiers do not support
		i) Need to implement the majority of identifiers in AST Nodes as named expressions (NameExpr) instead
	### DONE ###	2) Need to figure out how a component instantiation can determine which if it's mappings are ports and which are generics
