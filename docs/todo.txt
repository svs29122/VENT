This is a TODO list for VENT work:

I) Lexer ToDo
	1) 

II) AST ToDo
### DONE ###	1) Implement variable size arrays for syntax tree units requiring it
### DONE ###	2) Wrap AST token declarations in DEBUG macros
### DONE ###	3) Thinking it might be nice to have a walkTree method instead of forcing the parser to do it multiple times
	### DONE ###	i) the transpiler will also have to walk the tree to emit VHDL 
	### DONE ###	ii) wondering if I could use a set of callbacks e.g. handleEntityDecl() that the caller sets to keep it generic 
			 ###			- this way a caller wanting to print could set handleEntityDecl equal to some print function, while the parser may set handleEntityDecl equal to some function that frees mallocs
			 ###			- this is something like the well-known strategy pattern 
	4) Add node for generics
			
			
III) Parser ToDo
### DONE ###	1) Unit tests for basic parser functions
### DONE ###		i) flesh this out fully for ents before adding much more functionality
		ii) thinking I want a set of tests for the public API and for the private
			e.g. parser_test.c for public
				 parser_test_internals.c for private
### DONE ###   2) Implement error strategy e.g. the wrong token follows an ent decl
### DONE ###   3) Begin implementing Architecture parsing functionality	
### DONE ###   4) Need to complete architecture body signal assigment parsing and binary expression parsing
	
IV) Transpiler ToDo
	1) Need to add validation to transpile_test.c
		i) we currently only produce a file with 0 asserting or checking
	
V) Refactor ToDo
### DONE ###  	1) Go through Valgrind output and fix memory leaks
### DONE ###  	2) Go add static keyword to any variables that should be static
	3) Wondering about maybe passing the ventsrc char* to ParseProgram and having it do lexer/parser initialization instead of requiring a caller to do all of that work upfront
		i) i.e. change this:
			/****************************************/
				char* ventSrc = readFile(fileName);
				InitLexer(ventSrc);
				InitParser();
				
				struct Program* prog = ParseProgram();
			/****************************************/
		ii) to this:
			/****************************************/
				char* ventSrc = readFile(fileName);

				struct Program* prog = ParseProgram(ventsrc);
			/****************************************/
		

VI) Overall ToDO
	1) Need to implement basic functionality including proc, comp, map, if, when, loop


